# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: Push To Docker 

on:
  push:
    branches: [ "master" ]

jobs:
  BuildServer:
    runs-on: ubuntu-latest

    steps:
    - name: Get current date
      id: date
      run: echo "::set-output name=date::$(date +'%Y-%m-%d')"
    - name: Log in to Docker Hub
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - uses: actions/checkout@v3
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: |
          6.0.x
          7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal
    - name: Publish
      run: dotnet publish ./TelegramSearchBot/TelegramSearchBot.csproj -c Release -o ./out --self-contained false
    - name: Build and push Docker image nightly
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: moderras/telegramsearchbot:nightly-${{ steps.date.outputs.date }}
    - name: Build and push Docker image latest
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: moderras/telegramsearchbot:latest
    - name: Deploy to Server
      uses: cross-the-world/ssh-scp-ssh-pipelines@v1.1.4
      with:
        # ssh remote host
        host: ${{ secrets.SERVER_IP }}
        # ssh remote port
        port: ${{ secrets.SERVER_PORT }}
        # ssh remote user
        user: ${{ secrets.SERVER_USER }}
        # ssh remote password
        pass: ${{ secrets.SERVER_PASSWORD }}
        # execute pre-commands before scp
        first_ssh: kubectl delete pods tgsb && kubectl apply -f /data/TelegramSearchBot/deploy.yaml
  
  BuildPaddleOCRAgentArtifact:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Publish
      run: dotnet publish ./TelegramSearchBot.Agent.PaddleOCR/TelegramSearchBot.Agent.PaddleOCR.csproj -c Release -o TelegramSearchBot.Agent.PaddleOCR\bin\Release\net7.0\win-x64\publish --self-contained true
    - name: Upload Build Artifact
      uses: actions/upload-artifact@v2
      with:
        name: TelegramSearchBot.Agent.PaddleOCR
        path: TelegramSearchBot.Agent.PaddleOCR/bin/Release/net7.0/win-x64/publish

  BuildPaddleOCRAgentClickOnce:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x
    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v1.1
    - name: Restore dependencies
      run: dotnet restore
    - name: Publish ClickOnce
      shell: pwsh
      run: |
          $xmldata = [xml](Get-Content TelegramSearchBot.Agent.PaddleOCR/Properties/PublishProfiles/ClickOnceProfile.pubxml)
          $env:BUILD_VERSION = $xmldata.Project.PropertyGroup.ApplicationVersion.replace('*', $xmldata.Project.PropertyGroup.ApplicationRevision)
          echo $env:BUILD_VERSION
          msbuild TelegramSearchBot.Agent.PaddleOCR /t:DoPublish /p:Configuration=Release /p:PublishProfile=ClickOnceProfile
    - name: Upload to ClickOnce Server
      shell: pwsh
      env:
        SOURCE_DIR: 'TelegramSearchBot.Agent.PaddleOCR/bin/TelegramSearchBot.Agent.PaddleOCR'
        B2_BUCKET: ${{ secrets.B2_BUCKET }}
        B2_APPKEY_ID: ${{ secrets.B2_APPKEY_ID }}
        B2_APPKEY: ${{ secrets.B2_APPKEY }}
      run: |
        pip install --quiet --no-cache-dir b2
        b2 authorize-account $env:B2_APPKEY_ID $env:B2_APPKEY
        b2 sync --delete --replaceNewer $env:SOURCE_DIR $env:B2_BUCKET/TelegramSearchBot.Agent.PaddleOCR

        # TO-DO: Delete old versions of updated files because that's what
        # we're already using GitHub for... but B2 doesn't make this easy:
        # https://github.com/Backblaze/B2_Command_Line_Tool/issues/324

        b2 clear-account
