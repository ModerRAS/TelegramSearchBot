// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramSearchBot.Model;

#nullable disable

namespace TelegramSearchBot.Migrations
{
    [DbContext(typeof(DataDbContext))]
    [Migration("20250524154448_AddSearchPageCache")]
    partial class AddSearchPageCache
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.5");

            modelBuilder.Entity("TelegramSearchBot.Model.Data.AppConfigurationItem", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Key");

                    b.ToTable("AppConfigurationItems");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.ChannelWithModel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("LLMChannelId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModelName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LLMChannelId");

                    b.ToTable("ChannelsWithModel");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.GroupData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsBlacklist")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsForum")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Title")
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("GroupData");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.GroupSettings", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("IsManagerGroup")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LLMModelName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("GroupId")
                        .IsUnique();

                    b.ToTable("GroupSettings");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.LLMChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("Gateway")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int>("Parallel")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Priority")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Provider")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("LLMChannels");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.MemoryGraph", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("ChatId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("EntityType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FromEntity")
                        .HasColumnType("TEXT");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Observations")
                        .HasColumnType("TEXT");

                    b.Property<string>("RelationType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ToEntity")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("MemoryGraphs");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Content")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("TEXT");

                    b.Property<long>("FromUserId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("MessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplyToMessageId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("ReplyToUserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.MessageExtension", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("MessageDataId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MessageDataId");

                    b.ToTable("MessageExtensions");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.SearchPageCache", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TEXT");

                    b.Property<string>("SearchOptionJson")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("UUID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("SearchPageCaches");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.ShortUrlMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ExpandedUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("OriginalUrl")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OriginalUrl");

                    b.ToTable("ShortUrlMappings");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.TelegramFileCacheEntry", b =>
                {
                    b.Property<string>("CacheKey")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("FileId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CacheKey");

                    b.HasIndex("CacheKey")
                        .IsUnique();

                    b.ToTable("TelegramFileCacheEntries");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.UserData", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool?>("IsBot")
                        .HasColumnType("INTEGER");

                    b.Property<bool?>("IsPremium")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserData");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.UserWithGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("GroupId")
                        .HasColumnType("INTEGER");

                    b.Property<long>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("UsersWithGroup");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.ChannelWithModel", b =>
                {
                    b.HasOne("TelegramSearchBot.Model.Data.LLMChannel", "LLMChannel")
                        .WithMany("Models")
                        .HasForeignKey("LLMChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LLMChannel");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.MessageExtension", b =>
                {
                    b.HasOne("TelegramSearchBot.Model.Data.Message", "Message")
                        .WithMany("MessageExtensions")
                        .HasForeignKey("MessageDataId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.LLMChannel", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("TelegramSearchBot.Model.Data.Message", b =>
                {
                    b.Navigation("MessageExtensions");
                });
#pragma warning restore 612, 618
        }
    }
}
